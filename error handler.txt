
const errorhanlder=(error,req,res,next)=>
return res.status(400).send(error.message); 
};
module.exports=errorhandler;







exports.trycatch=(controller)=>async(req,res,next)=>{
try{
await controller(req,res); 
}catch(error){
return next(error);
}
};



try{
const user=getUser(); 
if(!user){ 
throw new Error("user not found");
}
}catch(error)
return next(error)
}
return res.status(200).json({success:true});
});


//MIDDLEWARE ERROR HANDLING.
that have access to req and res objects and the nxt finction in the aplications req-res cycle
four parameters are--
err, req, res, and next.


app.use((err,req,res,next)=>{
res.status(500).json({errr:'wrong something'});
});


TRY_CATCH block.

try{

}catch(err){
console.error(err);
}


//Error event handling.


//Promises error Handling.
we can use .catch() to handle errors that occur during promise resolution or rejection.

somePromise()
  .then((result) => {
    // Handle the result
  .catch((err) => {
    // Handle the error
    console.error(err);
  });
  
  









